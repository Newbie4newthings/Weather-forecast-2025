# Hosting on Render - Detailed Guide

## Prerequisites
1. Create a [Render account](https://render.com)
2. Connect your GitHub account to Render
3. Make sure your project is pushed to GitHub

## Step 1: Prepare Your Project

1. First, create a `runtime.txt` in your project root:
```bash
python-3.12.0
```

2. Update `requirements.txt` by adding these required packages:
```bash
django
gunicorn
whitenoise  # for serving static files
numpy
requests
scikit-learn
pytz
```

3. Create a new file called `build.sh` in your project root:
```bash
#!/usr/bin/env bash
echo "Building the project..."
python -m pip install --upgrade pip
pip install -r weatherProject/requirements.txt

echo "Collecting static files..."
python weatherProject/manage.py collectstatic --noinput

echo "Running migrations..."
python weatherProject/manage.py migrate
```

4. Update your `weatherProject/weatherProject/settings.py`:
```python
import os
from pathlib import Path

# Add these settings or modify existing ones

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = 'RENDER' not in os.environ

ALLOWED_HOSTS = []
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Static files configuration
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Add whitenoise to middleware (add after SecurityMiddleware)
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    # ... other middleware
]

# Set secure SSL redirect
SECURE_SSL_REDIRECT = True if not DEBUG else False

# Database configuration (using SQLite)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
```

## Step 2: Deploy on Render

1. Log in to your Render dashboard

2. Click "New +" button and select "Web Service"

3. Connect your GitHub repository

4. Configure the web service:
   - **Name**: `weather-forecast-2025` (or your preferred name)
   - **Environment**: `Python 3`
   - **Region**: Choose closest to your target audience
   - **Branch**: `main` (or your default branch)
   - **Build Command**: `./build.sh`
   - **Start Command**: `cd weatherProject && gunicorn weatherProject.wsgi:application`

5. Add Environment Variables:
   ```
   PYTHON_VERSION=3.12.0
   SECRET_KEY=your-secure-secret-key
   ```

6. Set the Instance Type:
   - Select "Free" tier

7. Click "Create Web Service"

## Step 3: Monitor Deployment

1. Watch the deployment logs in real-time
2. Wait for the build and deployment to complete
3. Your app will be available at: `https://your-app-name.onrender.com`

## Common Issues and Solutions

1. **Static Files Not Loading**
   - Make sure `whitenoise` is installed and configured
   - Verify `STATIC_ROOT` is set correctly
   - Run `python manage.py collectstatic` locally to test

2. **Database Errors**
   - Check if migrations are running properly
   - Verify database configuration

3. **Application Error**
   - Check the Render logs for detailed error messages
   - Make sure all requirements are properly listed in `requirements.txt`

## Maintaining Your Deployment

1. **Updates**:
   - Push changes to GitHub
   - Render will automatically redeploy

2. **Monitoring**:
   - Use Render dashboard to monitor:
     - Application health
     - Resource usage
     - Logs

3. **Free Tier Limitations**:
   - 750 hours free per month
   - Spins down after 15 minutes of inactivity
   - Automatically spins up when receiving traffic